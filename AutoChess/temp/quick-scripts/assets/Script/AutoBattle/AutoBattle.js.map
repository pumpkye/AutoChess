{"version":3,"sources":["AutoBattle.ts"],"names":[],"mappings":";;;;;AAAA,iDAAkD;AAClD,4CAAsE;AACtE,+CAAiD;AACjD,yDAAqE;AACrE,gEAA+D;AAE/D;;GAEG;AACH;IACI;IAEA,CAAC;IAED,yBAAI,GAAJ;IAEA,CAAC;IAED,+BAAU,GAAV;IAEA,CAAC;IAED;;OAEG;IACH,iCAAY,GAAZ,UAAa,IAAgB;QACzB,IAAI,UAAU,GAAG,yBAAY,CAAC,aAAa,EAAE,CAAA;QAC7C,IAAI,CAAC,UAAU,EAAE;YACb,qBAAW,CAAC,iBAAO,CAAC,SAAS,CAAC,CAAC;YAC/B,OAAO,KAAK,CAAC;SAChB;QACD,uCAAmB,CAAC,IAAI,GAAG,6BAAS,CAAC,KAAK,CAAC;QAC3C,IAAI,IAAI,EAAE;YACN,uCAAmB,CAAC,IAAI,GAAG,IAAI,CAAC;SACnC;QACD,sBAAY,CAAC,UAAU,CAAC,CAAC;QACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,IAAI,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,OAAO,GAAG,UAAU,CAAC,mBAAmB,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAClE,IAAI,OAAO,GAAG,UAAU,CAAC,mBAAmB,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAClE,IAAI,OAAO,IAAI,OAAO,EAAE;gBACpB,uCAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;aAClD;SACJ;IACL,CAAC;IAED,yBAAI,GAAJ;QACI,yBAAY,CAAC,sBAAsB,CAAC,wBAAY,CAAC,CAAC;QAClD,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,gBAAgB;QAChB,EAAE;IACN,CAAC;IAED,+BAAU,GAAV;IAEA,CAAC;IAED;;;OAGG;IACH,uCAAkB,GAAlB,UAAmB,MAAc;QAC7B,IAAI,QAAQ,GAAG,IAAI,mCAAgB,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IACL,iBAAC;AAAD,CAvDA,AAuDC,IAAA;AAED;;GAEG;AACQ,QAAA,YAAY,GAAG,IAAI,UAAU,EAAE,CAAA","file":"","sourceRoot":"../../../../../assets/Script/AutoBattle","sourcesContent":["import { g_InputCache } from \"./Input/InputCache\";\nimport { printErrMsg, pErrTag, printDefault } from \"./OutPut/Printer\";\nimport { testInputStr } from \"./Input/TestInput\";\nimport { g_AutoBattleManager, Enum_Mode } from \"./AutoBattleManager\";\nimport { ChessNpcBaseData } from \"./TbxModel/ChessNpcBaseData\";\n\n/**\n * autoBattle 入口\n */\nclass AutoBattle {\n    constructor() {\n\n    }\n\n    init() {\n\n    }\n\n    loadConfig() {\n\n    }\n\n    /**\n     * 自走棋战斗\n     */\n    doAutoBattle(mode?: Enum_Mode) {\n        let battleInfo = g_InputCache.getBattleInfo()\n        if (!battleInfo) {\n            printErrMsg(pErrTag.inputNull);\n            return false;\n        }\n        g_AutoBattleManager.mode = Enum_Mode.quick;\n        if (mode) {\n            g_AutoBattleManager.mode = mode;\n        }\n        printDefault(battleInfo);\n        for (let i = 0; i < battleInfo.matches.length; i++) {\n            let match = battleInfo.matches[i];\n            let layoutA = battleInfo.getLayoutByPlayerId(match.playerThisIdA);\n            let layoutB = battleInfo.getLayoutByPlayerId(match.playerThisIdB);\n            if (layoutA && layoutB) {\n                g_AutoBattleManager.start(layoutA, layoutB, i);\n            }\n        }\n    }\n\n    test() {\n        g_InputCache.loadBattleInfoFromJson(testInputStr);\n        this.doAutoBattle();\n        //load testInput\n        //\n    }\n\n    checkInput() {\n\n    }\n\n    /**\n     * 获取ChessNpc的基础数据\n     * @param baseId \n     */\n    getNpcDataByBaseId(baseId: number) {\n        let baseData = new ChessNpcBaseData(baseId);\n    }\n}\n\n/**\n * 提供外部调用AutoBattle的接口\n */\nexport var g_AutoBattle = new AutoBattle()\n\n"]}