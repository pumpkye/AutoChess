{"version":3,"sources":["ChainHeal.ts"],"names":[],"mappings":";;;;;AAAA,qDAAoD;AACpD,qDAAoD;AAEpD,0DAA2D;AAE3D,6CAAsF;AACtF;;GAEG;AACH;IAA+B,6BAAe;IAC1C;eACI,iBAAO;IACX,CAAC;IACD,sBAAW,+BAAQ;aAAnB;YACI,OAAO,iCAAe,CAAC,SAAS,CAAC;QACrC,CAAC;;;OAAA;IACD,sBAAW,8BAAO;aAAlB;YACI,OAAO,WAAW,CAAC;QACvB,CAAC;;;OAAA;IAEM,wBAAI,GAAX,UAAY,IAAa;QACrB,iBAAM,IAAI,YAAC,IAAI,CAAC,CAAC;QACjB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,EAAE;YAC9B,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAE7C,IAAI,OAAO,GAAG,uCAAmB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,MAAM,GAAG,IAAI,KAAK,EAAY,CAAC;QACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,IAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACpB;SACJ;QACD,MAAM,CAAC,IAAI,CAAC,UAAC,CAAW,EAAE,CAAW;YACjC,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC;YAC1B,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC;YAC1B,OAAO,IAAI,GAAG,IAAI,CAAC;QACvB,CAAC,CAAC,CAAA;QACF,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC5B,IAAI,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,GAAG,cAAc,GAAG,GAAG,CAAC,CAAC;YAClE,wBAAc,CAAC,cAAI,CAAC,MAAM,EAAE,uBAAa,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;YAChH,QAAQ,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;SACjC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,gBAAC;AAAD,CA1CA,AA0CC,CA1C8B,iCAAe,GA0C7C;AA1CY,8BAAS","file":"","sourceRoot":"../../../../../../assets/Script/AutoBattle/SkillEffect","sourcesContent":["import { BaseSkillEffect } from \"./BaseSkillEffect\";\nimport { SkillEffectEnum } from \"./SkillEffectEnum\";\nimport { EffData } from \"../Model/EffectInfo\";\nimport { g_AutoBattleManager } from \"../AutoBattleManager\";\nimport { ChessNpc } from \"../Model/ChessNpc\";\nimport { printBattleMsg, pTag, pBattleAction, printDefault } from \"../OutPut/Printer\";\n/**\n * 对己方[0]个血量最低的单位回复[1]%的血量\n */\nexport class ChainHeal extends BaseSkillEffect {\n    constructor() {\n        super();\n    }\n    public get effectId(): number {\n        return SkillEffectEnum.chainHeal;\n    }\n    public get effName(): string {\n        return \"chainHeal\";\n    }\n\n    public play(data: EffData): boolean {\n        super.play(data);\n        let attacker = data.attacker;\n        if (!attacker || attacker.isDead) {\n            return false;\n        }\n        let count = data.skillEff.effArr[0];\n        let recoverPercent = data.skillEff.effArr[1];\n\n        let npcList = g_AutoBattleManager.getFriendList(attacker);\n        let hitNpc = new Array<ChessNpc>();\n        for (let i = 0; i < npcList.length; i++) {\n            const npc = npcList[i];\n            if (npc.hp / npc.maxHp < 1) {\n                hitNpc.push(npc);\n            }\n        }\n        hitNpc.sort((a: ChessNpc, b: ChessNpc) => {\n            let perA = a.hp / a.maxHp;\n            let perB = b.hp / b.maxHp;\n            return perA - perB;\n        })\n        count = Math.min(count, hitNpc.length);\n        for (let i = 0; i < count; i++) {\n            let defender = hitNpc[i];\n            let hpRecover = Math.floor(defender.maxHp * recoverPercent / 100);\n            printBattleMsg(pTag.battle, pBattleAction.recoverHp, { attacker: attacker, defender: defender, hp: hpRecover });\n            defender.reduceHp(-hpRecover);\n        }\n        return true;\n    }\n}"]}