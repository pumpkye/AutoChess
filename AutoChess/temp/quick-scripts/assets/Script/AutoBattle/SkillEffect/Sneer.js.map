{"version":3,"sources":["Sneer.ts"],"names":[],"mappings":";;;;;AAAA,qDAAoD;AACpD,qDAAqE;AACrE,kDAA0D;AAC1D,0DAA2D;AAC3D,gDAA+C;AAC/C,qDAAiD;AAEjD;;GAEG;AACH;IAA2B,yBAAe;IACtC;eACI,iBAAO;IACX,CAAC;IACD,sBAAW,2BAAQ;aAAnB;YACI,OAAO,iCAAe,CAAC,KAAK,CAAC;QACjC,CAAC;;;OAAA;IAED,sBAAW,0BAAO;aAAlB;YACI,OAAO,OAAO,CAAC;QACnB,CAAC;;;OAAA;IAED;;OAEG;IACI,oBAAI,GAAX,UAAY,IAAa;QACrB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,EAAE;YAC9B,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,IAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAClC,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEjC,QAAQ;QACR,IAAI,OAAO,GAAG,IAAI,uBAAU,EAAE,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,iCAAe,CAAC,UAAU,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC9D,IAAI,OAAO,GAAG,IAAI,oBAAO,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACvD,8BAAY,CAAC,iCAAe,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEvD,SAAS;QACT,OAAO,GAAG,IAAI,uBAAU,EAAE,CAAC;QAC3B,OAAO,CAAC,IAAI,CAAC,iCAAe,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,uCAAmB,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,GAAG,EAC3E,KAAK,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;QACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,IAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5B,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7B,IAAI,SAAO,GAAG,IAAI,oBAAO,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACvD,IAAI,SAAS,GAAG,IAAI,qBAAS,CAAC,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,SAAO,EAAE,iCAAe,CAAC,OAAO,CAAC,CAAC;YACvF,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,YAAC;AAAD,CA7CA,AA6CC,CA7C0B,iCAAe,GA6CzC;AA7CY,sBAAK","file":"","sourceRoot":"../../../../../../assets/Script/AutoBattle/SkillEffect","sourcesContent":["import { BaseSkillEffect } from \"./BaseSkillEffect\";\nimport { SkillEffectEnum, BuffAndDotState } from \"./SkillEffectEnum\";\nimport { EffData, EffectInfo } from \"../Model/EffectInfo\";\nimport { g_AutoBattleManager } from \"../AutoBattleManager\";\nimport { ChessBuff } from \"../Model/ChessBuff\";\nimport { skillEffects } from \"./InitSkillEffect\";\n\n/**\n * 嘲讽，使得周围[0]范围内的所有目标强制攻击自己[1]秒,同时提升自己的护甲[2]点,被嘲讽的目标期间无法释放技能，若嘲讽者死亡，则被嘲讽效果直接结束\n */\nexport class Sneer extends BaseSkillEffect {\n    constructor() {\n        super();\n    }\n    public get effectId(): number {\n        return SkillEffectEnum.sneer;\n    }\n\n    public get effName(): string {\n        return \"sneer\";\n    }\n\n    /**\n     * play\n     */\n    public play(data: EffData): boolean {\n        let attacker = data.attacker;\n        if (!attacker || attacker.isDead) {\n            return false;\n        }\n        let skillEff = data.skillEff;\n        let range = skillEff.effArr[0];\n        let lifeTime = skillEff.effArr[1];\n        let defence = skillEff.effArr[2];\n\n        //增加自身护甲\n        let effInfo = new EffectInfo();\n        effInfo.init(SkillEffectEnum.addDefence, [defence, lifeTime]);\n        let effData = new EffData(effInfo, attacker, attacker);\n        skillEffects[SkillEffectEnum.addDefence].play(effData);\n\n        //周围目标被嘲讽\n        effInfo = new EffectInfo();\n        effInfo.init(SkillEffectEnum.sneer);\n        let hitList = this.getRandomNpc(g_AutoBattleManager.getEnemyList(attacker), 100,\n            range, { x: attacker.posX, y: attacker.posY });\n        for (let i = 0; i < hitList.length; i++) {\n            const defender = hitList[i];\n            defender.setTarget(attacker);\n            let effData = new EffData(effInfo, attacker, defender);\n            let chessBuff = new ChessBuff(lifeTime, 0, defender, effData, BuffAndDotState.beSneer);\n            defender.addBuff(chessBuff);\n        }\n        return true;\n    }\n}"]}