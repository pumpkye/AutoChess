{"version":3,"sources":["ChessSkill.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../assets/Script/AutoBattle/Model","sourcesContent":["import { EffectInfo, EffData } from \"./EffectInfo\";\nimport { ChessNpc } from \"./ChessNpc\";\nimport { ATTACK_BASE_TIME } from \"../Config/AutoBattleConfig\";\nimport { skillEffects } from \"../SkillEffect/InitSkillEffect\";\nimport { BuffAndDotState, DamageType, SkillEffectEnum } from \"../SkillEffect/SkillEffectEnum\";\nimport { SkillBaseData } from \"../TbxModel/SkillBaseData\";\nimport { skillLevelData } from \"../TbxModel/SkillLevelData\";\nimport { g_AutoBattleManager } from \"../AutoBattleManager\";\nimport { printBattleMsg, pTag, pBattleAction, printDefault } from \"../OutPut/Printer\";\nimport { g_Util } from \"../Util\";\nimport { ChessBuff } from \"./ChessBuff\";\n\nenum SkillType {\n    /**\n     * 普攻技能\n     */\n    normal = 0,\n    /**\n     * 主动技能\n     */\n    active,\n    /**\n     * 被动技能\n     */\n    passive,\n    /**\n     * 种族技能\n     */\n    race,\n    /**\n     * 职业技能\n     */\n    career,\n}\n\n/**\n * 技能目标类型\n */\nenum SkillTargetType {\n    enemy = 0,\n    myself,\n    friend,\n    /**\n     * 当前方向\n     */\n    dir,\n    /**\n     * 目标地点\n     */\n    point,\n    /**\n     * 敌方最高星\n     */\n    enemyHighLevel,\n    /**\n     * 己方最低血量\n     */\n    friendLowHp,\n    /**\n     * 己方同职业\n     */\n    friendCareer = 11,\n    /**\n     * 己方同种族\n     */\n    friendRace,\n    /**\n     * 己方所有\n     */\n    friendAll,\n    /**\n     * 对方所有\n     */\n    enemyAll,\n    /**\n     * 场上所有\n     */\n    all,\n}\n\nexport class ChessSkill {\n    baseData: SkillBaseData;\n    levelData: skillLevelData;\n    initSuccess = false;\n    id: number;\n    curCdTime = 0;\n    maxCdTime = 0;\n    maxGcdTime = 0;\n    targetType = 0;\n    range = 0;\n    mpCost = 0;\n    skillEff: EffectInfo;\n\n    constructor(skillId: number, level: number) {\n        this.id = skillId;\n        this.baseData = new SkillBaseData(skillId);\n        this.levelData = new skillLevelData(skillId * 100 + level);\n        this.skillEff = new EffectInfo();\n        this.skillEff.initByStr(this.levelData.status);\n        this.maxCdTime = this.levelData.cd;\n        this.maxGcdTime = this.baseData.gcd;\n        this.mpCost = this.levelData.mp;\n        printBattleMsg(pTag.battle, pBattleAction.initSkill, { skillName: this.baseData.name });\n    }\n\n    play(attacker?: ChessNpc, defender?: ChessNpc) {\n        if (!attacker || attacker.isDead) {\n            return\n        }\n        switch (this.baseData.targetType) {\n            case SkillTargetType.enemy:\n                if (!defender || defender.isDead || defender.hasBuffState(BuffAndDotState.bkb)\n                    || !g_Util.checkPosShortInRange(attacker.posX, attacker.posY, defender.posX, defender.posY, this.levelData.range)) {\n                    if (defender && defender.hasBuffState(BuffAndDotState.bkb)) {\n                        printBattleMsg(pTag.battle, pBattleAction.bkb, { defender });\n                    }\n                    return;\n                }\n                break;\n            case SkillTargetType.myself:\n                defender = attacker;\n                break;\n            case SkillTargetType.dir:\n                break;\n            case SkillTargetType.enemyHighLevel:\n                break;\n            default:\n                break;\n        }\n\n        attacker.mp = attacker.mp - this.mpCost;\n        printBattleMsg(pTag.battle, pBattleAction.playSkill, { attacker: attacker, defender: defender, skillName: this.baseData.name });\n        let effId = this.skillEff.effId;\n        let effData = new EffData(this.skillEff, attacker, defender);\n        skillEffects[effId].play(effData);\n        this.startCD(attacker);\n    }\n\n    update(dt: number) {\n        if (this.curCdTime > 0) {\n            this.curCdTime = this.curCdTime - dt;\n            if (this.curCdTime < 0) {\n                this.curCdTime = 0;\n            }\n        }\n    }\n\n    startCD(attacker: ChessNpc) {\n        let reduceCdInfo = attacker.getAttrChange(\"reduceCD\");\n        let maxTime = this.maxCdTime;\n        if (reduceCdInfo && reduceCdInfo.length > 0) {\n            for (let i = 0; i < reduceCdInfo.length; i++) {\n                const per = reduceCdInfo[i].info;\n                maxTime = maxTime * (100 - per) / 100;\n            }\n        }\n        this.curCdTime = Math.floor(maxTime);\n        printBattleMsg(pTag.battle, pBattleAction.cdTime, { skillName: this.baseData.name, cd: this.curCdTime });\n    }\n\n    public get isActive(): boolean {\n        return this.baseData.type == SkillType.normal || this.baseData.type == SkillType.active;\n    }\n\n}\n\n/**\n * status: \"effId,damageType\"\n */\nexport class NormalSkill extends ChessSkill {\n    constructor(skillId: number, npc: ChessNpc) {\n        super(skillId, 1);\n        this.refreshAttr(npc);\n    }\n\n    /**\n     * 对于普攻附加的操作在这里处理\n     * @param attacker 攻击者\n     * @param defender 被攻击者\n     */\n    play(attacker?: ChessNpc, defender?: ChessNpc) {\n        if (attacker.hasBuffState(BuffAndDotState.beDisarm)) {\n            return;\n        }\n        this.refreshAttr(attacker);\n        if (!defender || defender.isDead\n            || !g_Util.checkPosShortInRange(attacker.posX, attacker.posY, attacker.curTarget.posX, attacker.curTarget.posY, attacker.attRange)) {\n            return;\n        }\n        let effId = this.skillEff.effId;\n        let damage = attacker.damage;\n        let damageType = this.skillEff.effArr[1];\n        //是否miss\n        let missInfos = defender.getAttrChange(\"miss\")\n        if (missInfos && missInfos.length > 0) {\n            for (let i = 0; i < missInfos.length; i++) {\n                const info = missInfos[i];\n                let rad = g_AutoBattleManager.getRandomNumber(100);\n                if (rad <= info.info) {\n                    this.startCD();\n                    printBattleMsg(pTag.battle, pBattleAction.miss, { attacker: attacker, defender: defender });\n                    return 0;\n                }\n            }\n        }\n        //是否添加折光添加伤害\n        let addDamageShieldInfo = attacker.getShieldState(\"AddDamageShield\")\n        if (addDamageShieldInfo && addDamageShieldInfo.length > 0) {\n            printBattleMsg(pTag.battle, pBattleAction.addDamage, { des: \"pre\", damage: damage });\n            for (let i = 0; i < addDamageShieldInfo.length; i++) {\n                const shield = addDamageShieldInfo[i];\n                let arg = { damage: damage }\n                shield.doShieldEffect(arg);\n                damage = arg.damage;\n            }\n            printBattleMsg(pTag.battle, pBattleAction.addDamage, { des: \"after\", damage: damage });\n        }\n        //判断是否暴击\n        let critInfos = attacker.getAttrChange(\"crit\")\n        if (critInfos && critInfos.length > 0) {\n            let tempDamage = damage;\n            for (let i = 0; i < critInfos.length; i++) {\n                const info = critInfos[i];\n                let rad = g_AutoBattleManager.getRandomNumber(100);\n                if (rad <= info.info.per) {\n                    damage = Math.max(damage, tempDamage * info.info.mul / 100);\n                }\n            }\n            if (damage > attacker.damage) {\n                printBattleMsg(pTag.battle, pBattleAction.crit, { npc: attacker, damage: damage });\n                //暴击是否触发了沉默\n                let silentInfos = attacker.getAttrChange(\"critSilent\");\n                if (silentInfos && silentInfos.length > 0) {\n                    let buff = new ChessBuff(silentInfos[0].info, 0, defender, null, BuffAndDotState.silent);\n                    defender.addBuff(buff);\n                    printBattleMsg(pTag.battle, pBattleAction.critSilent, { attacker: attacker, defender: defender, time: silentInfos[0].info });\n                }\n                //血之祭祀的血量回复\n                let bloodInfos = attacker.getAttrChange(\"bloodSacrifice\");\n                if (bloodInfos && bloodInfos.length > 0) {\n                    for (let i = 0; i < bloodInfos.length; i++) {\n                        const info = bloodInfos[i].info;\n                        let recoverHp = damage * info / 100;\n                        printBattleMsg(pTag.battle, pBattleAction.bloodSacrificeRecoverHp, { hp: recoverHp });\n                        attacker.reduceHp(-recoverHp);\n                    }\n                }\n\n            }\n        }\n\n        let effInfo = new EffectInfo();\n        effInfo.init(effId, [damage, damageType]);\n        let effData = new EffData(effInfo, attacker, defender);\n        let rDamage = skillEffects[effId].play(effData);\n        //附加溅射\n        let sputterInfo = attacker.getAttrChange(\"sputtering\");\n        if (sputterInfo && sputterInfo.length > 0) {\n            for (let i = 0; i < sputterInfo.length; i++) {\n                const info = sputterInfo[i].info;\n                let damage = Math.floor(rDamage * info.damagePer / 100);\n                let hitList = skillEffects[SkillEffectEnum.damage].getRandomNpc(g_AutoBattleManager.getEnemyList(attacker), 100, info.range, defender.getPosition());\n                let effInfo = new EffectInfo();\n                effInfo.init(SkillEffectEnum.damage, [damage, damageType]);\n                for (let j = 0; j < hitList.length; j++) {\n                    const npc = hitList[j];\n                    if (npc.thisId != defender.thisId) {\n                        let effData = new EffData(effInfo, attacker, npc);\n                        skillEffects[SkillEffectEnum.damage].play(effData);\n                    }\n                }\n            }\n        }\n        //嗜血之矛附加伤害\n        let bloodthirstySpearInfo = attacker.getAttrChange(\"bloodthirstySpear\");\n        if (bloodthirstySpearInfo && bloodthirstySpearInfo.length > 0) {\n            let info = bloodthirstySpearInfo[0].info;\n            attacker.reduceHp(info.hpReduce);\n            let effInfo = new EffectInfo();\n            effInfo.init(SkillEffectEnum.bloodthirstySpearBuff, [info.damage]);\n            let effData = new EffData(effInfo, attacker, defender);\n            let buff = new ChessBuff(info.lifeTime, 1000, defender, effData);\n            defender.addBuff(buff);\n        }\n        //是否有manaBurn效果\n        let manaBurnInfo = attacker.getAttrChange(\"manaBurn\");\n        if (manaBurnInfo && manaBurnInfo.length > 0) {\n            let info = manaBurnInfo[0].info;\n            let mp = Math.min(info.mana, defender.mp);\n            defender.mp = defender.mp - mp;\n            let damage = mp * info.damagePer / 100;\n            let effInfo = new EffectInfo();\n            effInfo.init(SkillEffectEnum.damage, [damage, DamageType.real]);\n            let effData = new EffData(effInfo, attacker, defender);\n            let rDamage = skillEffects[SkillEffectEnum.damage].play(effData);\n        }\n        this.startCD();\n    }\n\n    startCD() {\n        this.curCdTime = this.maxCdTime;\n        printBattleMsg(pTag.battle, pBattleAction.cdTime, { skillName: this.baseData.name, cd: this.curCdTime });\n    }\n\n    /**\n     * 根据npc的数值更新普攻的数值\n     */\n    refreshAttr(npc: ChessNpc) {\n        let attSpeed = npc.attSpeed;\n        if (attSpeed <= 0) {\n            attSpeed = 1;\n        }\n        this.maxCdTime = Math.floor(100.0 * ATTACK_BASE_TIME / npc.attSpeed * 1000);\n        this.maxGcdTime = this.maxCdTime;\n        this.range = npc.attRange;\n    }\n}\n\nexport class RaceSkill extends ChessSkill {\n    race = 0;\n    isTeamA = false;\n    constructor(skillId: number, race: number, isTeamA: boolean) {\n        super(skillId, 1);\n        this.race = race;\n        this.isTeamA = isTeamA;\n    }\n    play() {\n        printDefault(\"play race skill\")\n        let effId = this.skillEff.effId;\n        let effData = new EffData(this.skillEff);\n        effData.race = this.race;\n\n        let npcList: Array<ChessNpc>;\n        switch (this.baseData.targetType) {\n            case SkillTargetType.friendRace:\n                printDefault(\"己方同种族\" + this.race)\n                npcList = this.isTeamA ? g_AutoBattleManager.npcListA : g_AutoBattleManager.npcListB;\n                for (let i = 0; i < npcList.length; i++) {\n                    const npc = npcList[i];\n                    if (npc.race == this.race) {\n                        effData.defender = npc;\n                        skillEffects[effId].play(effData);\n                    }\n                }\n                break;\n            case SkillTargetType.enemyAll:\n                npcList = this.isTeamA ? g_AutoBattleManager.npcListB : g_AutoBattleManager.npcListA;\n                for (let i = 0; i < npcList.length; i++) {\n                    const npc = npcList[i];\n                    effData.defender = npc;\n                    skillEffects[effId].play(effData);\n                }\n                break;\n            case SkillTargetType.friendAll:\n                npcList = this.isTeamA ? g_AutoBattleManager.npcListA : g_AutoBattleManager.npcListB;\n                for (let i = 0; i < npcList.length; i++) {\n                    const npc = npcList[i];\n                    effData.defender = npc;\n                    skillEffects[effId].play(effData);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n\nexport class CareerSkill extends ChessSkill {\n    career = 0;\n    isTeamA = false;\n    constructor(skillId: number, career: number, isTeamA: boolean) {\n        super(skillId, 1);\n        this.career = Number(career);\n        this.isTeamA = isTeamA;\n    }\n    play() {\n        let effId = this.skillEff.effId;\n        let effData = new EffData(this.skillEff);\n        effData.career = this.career;\n\n        let npcList: Array<ChessNpc>;\n        switch (this.baseData.targetType) {\n            case SkillTargetType.friendCareer:\n                npcList = this.isTeamA ? g_AutoBattleManager.npcListA : g_AutoBattleManager.npcListB;\n                for (let i = 0; i < npcList.length; i++) {\n                    const npc = npcList[i];\n                    if (npc.career == this.career) {\n                        effData.defender = npc;\n                        skillEffects[effId].play(effData);\n                    }\n                }\n                break;\n            case SkillTargetType.enemyAll:\n                npcList = this.isTeamA ? g_AutoBattleManager.npcListB : g_AutoBattleManager.npcListA;\n                for (let i = 0; i < npcList.length; i++) {\n                    const npc = npcList[i];\n                    effData.defender = npc;\n                    skillEffects[effId].play(effData);\n                }\n                break;\n            case SkillTargetType.friendAll:\n                npcList = this.isTeamA ? g_AutoBattleManager.npcListA : g_AutoBattleManager.npcListB;\n                for (let i = 0; i < npcList.length; i++) {\n                    const npc = npcList[i];\n                    effData.defender = npc;\n                    skillEffects[effId].play(effData);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n"]}