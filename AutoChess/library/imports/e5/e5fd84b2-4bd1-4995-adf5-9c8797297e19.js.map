{"version":3,"sources":["../../../../../../assets/Script/AutoBattle/SkillEffect/assets/Script/AutoBattle/SkillEffect/BloodSacrifice.ts"],"names":[],"mappings":";;;;;AAAA,qDAAoD;AACpD,qDAAqE;AAErE,gDAA+C;AAC/C;;GAEG;AACH;IAAoC,kCAAe;IAC/C;eACI,iBAAO;IACX,CAAC;IACD,sBAAW,oCAAQ;aAAnB;YACI,OAAO,iCAAe,CAAC,cAAc,CAAC;QAC1C,CAAC;;;OAAA;IACD,sBAAW,mCAAO;aAAlB;YACI,OAAO,gBAAgB,CAAC;QAC5B,CAAC;;;OAAA;IAEM,6BAAI,GAAX,UAAY,IAAa;QACrB,iBAAM,IAAI,YAAC,IAAI,CAAC,CAAC;QACjB,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAClF,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC1C,IAAI,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEvC,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,SAAS,GAAG,GAAG,CAAC,CAAC;QAC5D,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,WAAW,GAAG,GAAG,CAAC,CAAC;QAChE,iEAAiE;QACjE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAEjC,IAAI,IAAI,GAAG,IAAI,qBAAS,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,iCAAe,CAAC,GAAG,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;QACjD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,qBAAC;AAAD,CAjCA,AAiCC,CAjCmC,iCAAe,GAiClD;AAjCY,wCAAc","file":"","sourceRoot":"../../../../../../assets/Script/AutoBattle/SkillEffect","sourcesContent":["import { BaseSkillEffect } from \"./BaseSkillEffect\";\nimport { SkillEffectEnum, BuffAndDotState } from \"./SkillEffectEnum\";\nimport { EffData } from \"../Model/EffectInfo\";\nimport { ChessBuff } from \"../Model/ChessBuff\";\n/**\n * 对当前目标造成最大生命值[0]%的伤害，同时对自己造成最大生命值[1]%的伤害，并获得一个buff:触发暴击时恢复伤害[2]%的血量，持续时间[3]秒\n */\nexport class BloodSacrifice extends BaseSkillEffect {\n    constructor() {\n        super();\n    }\n    public get effectId(): number {\n        return SkillEffectEnum.bloodSacrifice;\n    }\n    public get effName(): string {\n        return \"bloodSacrifice\";\n    }\n\n    public play(data: EffData): boolean {\n        super.play(data);\n        if (!data.attacker || data.attacker.isDead || !data.defender || data.defender.isDead) {\n            return false;\n        }\n\n        let damagePer = data.skillEff.effArr[0];\n        let hurtSelfPer = data.skillEff.effArr[1];\n        let recoverPer = data.skillEff.effArr[2];\n        let lifeTime = data.skillEff.effArr[3];\n\n        let damage = Math.floor(data.defender.hp * damagePer / 100);\n        let hurtSelf = Math.floor(data.attacker.hp * hurtSelfPer / 100);\n        // let hurtSelf = Math.floor(damage * hurtSelfPer / 100);        \n        data.defender.reduceHp(damage);\n        data.attacker.reduceHp(hurtSelf);\n\n        let buff = new ChessBuff(lifeTime, 0, data.attacker, null, BuffAndDotState.bkb);\n        buff.setAttrChange(\"bloodSacrifice\", recoverPer);\n        data.attacker.addBuff(buff);\n        return true;\n    }\n}"]}