{"version":3,"sources":["../../../../../assets/Script/Gui/assets/Script/Gui/UIChessTable.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Script/Gui","sourcesContent":["import { g_UIManager } from \"./UIManager\";\nimport UISetNpc from \"./UISetNpc\";\nimport { ChessNpc } from \"../AutoBattle/Model/ChessNpc\";\nimport { ChessNpcInfo } from \"../AutoBattle/Input/InputCache\";\n\n// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class UIChessTable extends cc.Component {\n    gridArr = new Array<cc.Node>();\n\n    layout: Array<ChessNpcInfo>;\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start() {\n        let lines = this.node.children;\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            let grids = line.children;\n            for (let j = 0; j < grids.length; j++) {\n                const grid = grids[j];\n                grid.name = `grid${j}${i}`;\n                grid.on('click', this.onGridClick, this);\n                this.gridArr.push(grid);\n                let label = cc.find(\"Background/npcName\", grid).getComponent(cc.Label);\n                label.string = \"\";\n            }\n        }\n        this.layout = new Array<ChessNpcInfo>();\n    }\n\n    clear() {\n        this.layout = new Array();\n        for (let i = 0; i < this.gridArr.length; i++) {\n            const node = this.gridArr[i];\n            let label = cc.find(\"Background/npcName\", node).getComponent(cc.Label);\n            label.string = \"\";\n        }\n    }\n\n    onGridClick(event) {\n        let gridName: string = event.target.parent.name;\n        let x = gridName.substr(4, 1);\n        let y = gridName.substr(5, 1);\n\n        let panel: UISetNpc = g_UIManager.getOrCreatePanel(\"UISetNpc\");\n        panel.setGridPos(Number(x), Number(y));\n    }\n\n    setGridLabel(x: number, y: number, npc: ChessNpc) {\n        console.log(npc);\n        let idx = y * 8 + x;\n        let node = this.gridArr[idx];\n        let label = cc.find(\"Background/npcName\", node).getComponent(cc.Label);\n        label.string = npc.name;\n        if (y > 3) {\n            x = 7 - x;\n            y = 7 - y;\n        }\n        let chessNpcInfo = new ChessNpcInfo(0, npc.baseId, npc.level, { x: x, y: y })\n        console.log(chessNpcInfo);\n        if (!npc.baseId) {\n            delete (this.layout[idx]);\n        } else {\n            this.layout[idx] = chessNpcInfo;\n        }\n    }\n    // update (dt) {}\n}\n"]}