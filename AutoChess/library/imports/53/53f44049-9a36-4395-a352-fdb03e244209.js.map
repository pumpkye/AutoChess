{"version":3,"sources":["../../../../../../assets/Script/AutoBattle/SkillEffect/assets/Script/AutoBattle/SkillEffect/Summon.ts"],"names":[],"mappings":";;;;;AAAA,qDAAoD;AACpD,qDAAoD;AAEpD,0DAA2D;AAC3D,8CAA6C;AAC7C;;GAEG;AACH;IAA4B,0BAAe;IACvC;eACI,iBAAO;IACX,CAAC;IACD,sBAAW,4BAAQ;aAAnB;YACI,OAAO,iCAAe,CAAC,MAAM,CAAC;QAClC,CAAC;;;OAAA;IACD,sBAAW,2BAAO;aAAlB;YACI,OAAO,QAAQ,CAAC;QACpB,CAAC;;;OAAA;IAEM,qBAAI,GAAX,UAAY,IAAa;QACrB,iBAAM,IAAI,YAAC,IAAI,CAAC,CAAC;QACjB,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEpC,IAAI,OAAO,GAAG,uCAAmB,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/D,IAAI,UAAU,GAAG,uCAAmB,CAAC,UAAU,CAAC;QAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC5B,IAAI,GAAG,GAAG,uCAAmB,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;YAChF,IAAI,GAAG,EAAE;gBACL,IAAI,GAAG,GAAG,IAAI,mBAAQ,CAAC,uCAAmB,CAAC,cAAc,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAC1I,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC9B,GAAG,CAAC,aAAa,EAAE,CAAC;gBACpB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAClB,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;aAClC;SACJ;QAGD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEL,aAAC;AAAD,CArCA,AAqCC,CArC2B,iCAAe,GAqC1C;AArCY,wBAAM","file":"","sourceRoot":"../../../../../../assets/Script/AutoBattle/SkillEffect","sourcesContent":["import { BaseSkillEffect } from \"./BaseSkillEffect\";\nimport { SkillEffectEnum } from \"./SkillEffectEnum\";\nimport { EffData } from \"../model/EffectInfo\";\nimport { g_AutoBattleManager } from \"../AutoBattleManager\";\nimport { ChessPet } from \"../Model/ChessNpc\";\n/**\n * 召唤npcId为[0]的npc，召唤[1]个\n */\nexport class Summon extends BaseSkillEffect {\n    constructor() {\n        super();\n    }\n    public get effectId(): number {\n        return SkillEffectEnum.summon;\n    }\n    public get effName(): string {\n        return \"summon\";\n    }\n\n    public play(data: EffData): boolean {\n        super.play(data);\n        if (!data.attacker || data.attacker.isDead) {\n            return false;\n        }\n\n        let npcBaseId = data.skillEff.effArr[0];\n        let count = data.skillEff.effArr[1];\n\n        let npcList = g_AutoBattleManager.getFriendList(data.attacker);\n        let chessTable = g_AutoBattleManager.chessTable;\n        for (let i = 0; i < count; i++) {\n            let pos = g_AutoBattleManager.getNearBlankPosition(data.attacker.getPosition());\n            if (pos) {\n                let pet = new ChessPet(g_AutoBattleManager.generateThisId(), npcBaseId, data.attacker.level, data.attacker.isTeamA, data.attacker.thisId);\n                pet.setPosition(pos.x, pos.y);\n                pet.initSkillList();\n                npcList.push(pet);\n                chessTable[pos.x][pos.y] = pet;\n            }\n        }\n\n\n        return true;\n    }\n\n}"]}